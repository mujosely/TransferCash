{"ast":null,"code":"const dropList = document.querySelectorAll(\"form select\"),\n      fromCurrency = document.querySelector(\".from select\"),\n      toCurrency = document.querySelector(\".to select\"),\n      getButton = document.querySelector(\"form button\");\n\nfor (let i = 0; i < dropList.length; i++) {\n  for (let currency_code in country_list) {\n    // selecting USD by default as FROM currency and NPR as TO currency\n    let selected = i == 0 ? currency_code == \"USD\" ? \"selected\" : \"\" : currency_code == \"NPR\" ? \"selected\" : \"\"; // creating option tag with passing currency code as a text and value\n\n    let optionTag = `<option value=\"${currency_code}\" ${selected}>${currency_code}</option>`; // inserting options tag inside select tag\n\n    dropList[i].insertAdjacentHTML(\"beforeend\", optionTag);\n  }\n\n  dropList[i].addEventListener(\"change\", e => {\n    loadFlag(e.target); // calling loadFlag with passing target element as an argument\n  });\n}\n\nfunction loadFlag(element) {\n  for (let code in country_list) {\n    if (code == element.value) {\n      // if currency code of country list is equal to option value\n      let imgTag = element.parentElement.querySelector(\"img\"); // selecting img tag of particular drop list\n      // passing country code of a selected currency code in a img url\n\n      imgTag.src = `https://flagcdn.com/48x36/${country_list[code].toLowerCase()}.png`;\n    }\n  }\n}\n\nwindow.addEventListener(\"load\", () => {\n  getExchangeRate();\n});\ngetButton.addEventListener(\"click\", e => {\n  e.preventDefault(); //preventing form from submitting\n\n  getExchangeRate();\n});\nconst exchangeIcon = document.querySelector(\"form .icon\");\nexchangeIcon.addEventListener(\"click\", () => {\n  let tempCode = fromCurrency.value; // temporary currency code of FROM drop list\n\n  fromCurrency.value = toCurrency.value; // passing TO currency code to FROM currency code\n\n  toCurrency.value = tempCode; // passing temporary currency code to TO currency code\n\n  loadFlag(fromCurrency); // calling loadFlag with passing select element (fromCurrency) of FROM\n\n  loadFlag(toCurrency); // calling loadFlag with passing select element (toCurrency) of TO\n\n  getExchangeRate(); // calling getExchangeRate\n});\n\nfunction getExchangeRate() {\n  const amount = document.querySelector(\"form input\");\n  const exchangeRateTxt = document.querySelector(\"form .exchange-rate\");\n  let amountVal = amount.value; // if user don't enter any value or enter 0 then we'll put 1 value by default in the input field\n\n  if (amountVal == \"\" || amountVal == \"0\") {\n    amount.value = \"1\";\n    amountVal = 1;\n  }\n\n  exchangeRateTxt.innerText = \"Getting exchange rate...\";\n  let url = `https://v6.exchangerate-api.com/v6/YOUR-API-KEY/latest/${fromCurrency.value}`; // fetching api response and returning it with parsing into js obj and in another then method receiving that obj\n\n  fetch(url).then(response => response.json()).then(result => {\n    let exchangeRate = result.conversion_rates[toCurrency.value]; // getting user selected TO currency rate\n\n    let totalExRate = (amountVal * exchangeRate).toFixed(2); // multiplying user entered value with selected TO currency rate\n\n    exchangeRateTxt.innerText = `${amountVal} ${fromCurrency.value} = ${totalExRate} ${toCurrency.value}`;\n  }).catch(() => {\n    // if user is offline or any other error occured while fetching data then catch function will run\n    exchangeRateTxt.innerText = \"Something went wrong\";\n  });\n}","map":{"version":3,"sources":["C:/Users/IRUMVA/Desktop/TuzaPay/tuzapays/src/pages/layout/js/script.js"],"names":["dropList","document","querySelectorAll","fromCurrency","querySelector","toCurrency","getButton","i","length","currency_code","country_list","selected","optionTag","insertAdjacentHTML","addEventListener","e","loadFlag","target","element","code","value","imgTag","parentElement","src","toLowerCase","window","getExchangeRate","preventDefault","exchangeIcon","tempCode","amount","exchangeRateTxt","amountVal","innerText","url","fetch","then","response","json","result","exchangeRate","conversion_rates","totalExRate","toFixed","catch"],"mappings":"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","sourcesContent":["const dropList = document.querySelectorAll(\"form select\"),\r\nfromCurrency = document.querySelector(\".from select\"),\r\ntoCurrency = document.querySelector(\".to select\"),\r\ngetButton = document.querySelector(\"form button\");\r\n\r\nfor (let i = 0; i < dropList.length; i++) {\r\n    for(let currency_code in country_list){\r\n        // selecting USD by default as FROM currency and NPR as TO currency\r\n        let selected = i == 0 ? currency_code == \"USD\" ? \"selected\" : \"\" : currency_code == \"NPR\" ? \"selected\" : \"\";\r\n        // creating option tag with passing currency code as a text and value\r\n        let optionTag = `<option value=\"${currency_code}\" ${selected}>${currency_code}</option>`;\r\n        // inserting options tag inside select tag\r\n        dropList[i].insertAdjacentHTML(\"beforeend\", optionTag);\r\n    }\r\n    dropList[i].addEventListener(\"change\", e =>{\r\n        loadFlag(e.target); // calling loadFlag with passing target element as an argument\r\n    });\r\n}\r\n\r\nfunction loadFlag(element){\r\n    for(let code in country_list){\r\n        if(code == element.value){ // if currency code of country list is equal to option value\r\n            let imgTag = element.parentElement.querySelector(\"img\"); // selecting img tag of particular drop list\r\n            // passing country code of a selected currency code in a img url\r\n            imgTag.src = `https://flagcdn.com/48x36/${country_list[code].toLowerCase()}.png`;\r\n        }\r\n    }\r\n}\r\n\r\nwindow.addEventListener(\"load\", ()=>{\r\n    getExchangeRate();\r\n});\r\n\r\ngetButton.addEventListener(\"click\", e =>{\r\n    e.preventDefault(); //preventing form from submitting\r\n    getExchangeRate();\r\n});\r\n\r\nconst exchangeIcon = document.querySelector(\"form .icon\");\r\nexchangeIcon.addEventListener(\"click\", ()=>{\r\n    let tempCode = fromCurrency.value; // temporary currency code of FROM drop list\r\n    fromCurrency.value = toCurrency.value; // passing TO currency code to FROM currency code\r\n    toCurrency.value = tempCode; // passing temporary currency code to TO currency code\r\n    loadFlag(fromCurrency); // calling loadFlag with passing select element (fromCurrency) of FROM\r\n    loadFlag(toCurrency); // calling loadFlag with passing select element (toCurrency) of TO\r\n    getExchangeRate(); // calling getExchangeRate\r\n})\r\n\r\nfunction getExchangeRate(){\r\n    const amount = document.querySelector(\"form input\");\r\n    const exchangeRateTxt = document.querySelector(\"form .exchange-rate\");\r\n    let amountVal = amount.value;\r\n    // if user don't enter any value or enter 0 then we'll put 1 value by default in the input field\r\n    if(amountVal == \"\" || amountVal == \"0\"){\r\n        amount.value = \"1\";\r\n        amountVal = 1;\r\n    }\r\n    exchangeRateTxt.innerText = \"Getting exchange rate...\";\r\n    let url = `https://v6.exchangerate-api.com/v6/YOUR-API-KEY/latest/${fromCurrency.value}`;\r\n    // fetching api response and returning it with parsing into js obj and in another then method receiving that obj\r\n    fetch(url).then(response => response.json()).then(result =>{\r\n        let exchangeRate = result.conversion_rates[toCurrency.value]; // getting user selected TO currency rate\r\n        let totalExRate = (amountVal * exchangeRate).toFixed(2); // multiplying user entered value with selected TO currency rate\r\n        exchangeRateTxt.innerText = `${amountVal} ${fromCurrency.value} = ${totalExRate} ${toCurrency.value}`;\r\n    }).catch(() =>{ // if user is offline or any other error occured while fetching data then catch function will run\r\n        exchangeRateTxt.innerText = \"Something went wrong\";\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}